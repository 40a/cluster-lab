#!/usr/bin/env bash

# give every container started by Cluster Lab
# a naming prefix
CLUSTER_LAB_CONTAINER_NAMESPACE="cluster_lab"

function check_docker_images(){
  if [[ $(is_verbose) -eq 0 ]]; then
    echo -e "\nDocker Images"
  fi

  # from docker version 1.10.0 we can simplify by
  # docker images --format "{{.Repository}}:{{.Tag}}" | cut -d ':' -f1

  result=$(docker images)
  images='swarm consul'

  for image in $images; do
    echo "$result" | grep -q "$image"
    evaluate_result $? "  ${image} exists"
  done
}

function docker_images(){
  if [[ -z "$DOCKER_IMAGES" ]]; then
    DOCKER_IMAGES=$(docker images)
  fi
  echo "$DOCKER_IMAGES"
}

function docker_container(){
  if [[ -z "$DOCKER_CONTAINER" ]]; then
    DOCKER_CONTAINER=$(docker ps)
  fi
  echo "$DOCKER_CONTAINER"
}

function consul_nodes_from_kv(){
  if [[ -z "$CONSUL_NODES_FROM_KV" ]]; then
    CONSUL_NODES_FROM_KV="$(curl --silent http://"${CLUSTER_NODE_IP}":8500/v1/catalog/nodes)"
  fi
  echo "$CONSUL_NODES_FROM_KV"
}

function check_consul(){
  if [[ $(is_verbose) -eq 0 ]]; then
    echo -e "\nConsul"
  fi

  docker_images | grep -q 'consul'
  evaluate_result $? "  Consul Docker image exists"

  docker_container | grep -q "${CLUSTER_LAB_CONTAINER_NAMESPACE}_consul"
  evaluate_result $? "  Consul Docker container is running"

  listening_consul_ports=$(netstat -tlpen | grep consul)
  expected_consul_ports="8300 8301 8302 8400 8500 8600"
  for port in $expected_consul_ports; do
    echo "${listening_consul_ports}" | grep -q "${port}"
    evaluate_result $? "  Consul is listening on port ${port}"
  done

  consul_nodes_from_kv | grep -q "Address"
  evaluate_result $? "  Consul API works"

  # extract IPs of all consul nodes from json returned from API
  # ping all IPs to make sure they can be reached via network
  regex="((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))"
  while read ip_address_snippet ; do
    local ip=$(echo "$ip_address_snippet" | grep -oP "${regex}")
    ping -W 1 -c 2 ${ip} > /dev/null 2>&1
    evaluate_result $? "  Cluster-Node is pingable with IP ${ip}"
  done < <( consul_nodes_from_kv | grep -oP "\"Address\":\"${regex}\"" )

  number_of_failed_consul_nodes=$(docker exec ${CLUSTER_LAB_CONTAINER_NAMESPACE}_consul consul members | grep -c 'failed')
  [[ $number_of_failed_consul_nodes -eq 0 ]]
  evaluate_result $? "  No Cluster-Node is in status 'failed'"

  CLUSTER_NODE_IP="$(get_ip_of_interface "${CLUSTER_INTERFACE}")"
  ESCAPED_CLUSTER_NODE_IP=$(escape_ip_for_regex "${CLUSTER_NODE_IP}")
  netstat --numeric --listening --programs --tcp --inet | grep 'docker' | grep -q -E "${ESCAPED_CLUSTER_NODE_IP}:7946"
  evaluate_result $? "  Consul is able to talk to Docker-Engine on port 7946 (Serf)"
}

function check_swarm(){
  if [[ $(is_verbose) -eq 0 ]]; then
    echo -e "\nSwarm"
  fi

  number_of_alive_consul_nodes=$(docker exec ${CLUSTER_LAB_CONTAINER_NAMESPACE}_consul consul members | grep -c 'alive')
  number_of_swarm_nodes=$(docker -H "tcp://${CLUSTER_NODE_IP}:2378" info | grep 'Nodes: ' | cut -d ' ' -f2)
  [[ $number_of_swarm_nodes -eq $number_of_alive_consul_nodes ]]
  evaluate_result $? "  Number of Swarm and Consul nodes is equal which means our cluster is healthy"
}

function pre_check_docker_container(){
  # maybe we should remove this function
  # if we do not find a good check/test
  true
}

function post_check_docker_container(){
  check_consul
  check_swarm
}

# docker container
function run_docker_container(){
  if [[ $(is_verbose) -eq 0 ]]; then
    echo -e "\n\e[34mConfigure Docker containers for Consul and Swarm\e[0m"
  fi
  CLUSTER_NODE_IP="$(get_ip_of_interface "${CLUSTER_INTERFACE}")"

  # configure Consul start command
  local consul_docker="docker run -dit --restart always --name ${CLUSTER_LAB_CONTAINER_NAMESPACE}_consul --net host"
  local consul_ports="-p ${CLUSTER_NODE_IP}:8400:8400 -p ${CLUSTER_NODE_IP}:8500:8500 -p ${CLUSTER_NODE_IP}:8600:8600 -p ${CLUSTER_NODE_IP}:8301:8301 -p ${CLUSTER_NODE_IP}:8302:8302 ${IMAGE_CONSUL}"

  if [[ "$(is_node_cluster_leader)" == "0" ]]; then
    # this node is cluster leader and should bootstrap consul
    local consul_command="agent -server -rejoin -data-dir /data -ui-dir /ui -bind ${CLUSTER_NODE_IP} -client 0.0.0.0 -bootstrap-expect 1"
  else
    ensure_leader_ip_is_set
    # this node is cluster follower and should join the existing leader
    local consul_command="agent -server -rejoin -data-dir /data -ui-dir /ui -bind ${CLUSTER_NODE_IP} -client 0.0.0.0 -join ${LEADER_IP}:8301"
  fi

  # start Consul container
  local cmd="$consul_docker $consul_ports $consul_command"
  eval "$cmd"  > /dev/null 2>&1

  # wait for Consul to initiate
  sleep 3

  # start Swarm-Join container
  eval "docker run -dit --restart always --name ${CLUSTER_LAB_CONTAINER_NAMESPACE}_swarm ${IMAGE_SWARM} join --advertise ${CLUSTER_NODE_IP}:2375 consul://${CLUSTER_NODE_IP}:8500"  > /dev/null 2>&1


  # start Swarm-Manage container
  eval "docker run -dit --restart always --name ${CLUSTER_LAB_CONTAINER_NAMESPACE}_swarmmanage -p 2378:2375 ${IMAGE_SWARM} manage --replication --advertise ${CLUSTER_NODE_IP}:2378 consul://${CLUSTER_NODE_IP}:8500"  > /dev/null 2>&1
}

function remove_docker_container(){
  if [[ $(is_verbose) -eq 0 ]]; then
    echo -e "\n\e[34mRemove Docker container\e[0m"
  fi

  docker rm -vf "${CLUSTER_LAB_CONTAINER_NAMESPACE}_swarmmanage" > /dev/null 2>&1
  docker rm -vf "${CLUSTER_LAB_CONTAINER_NAMESPACE}_swarm" > /dev/null 2>&1
  docker rm -vf "${CLUSTER_LAB_CONTAINER_NAMESPACE}_consul" > /dev/null 2>&1
}
